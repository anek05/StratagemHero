@page "/"
@rendermode InteractiveServer 
@inject IJSRuntime JSRuntime


<PageTitle>Home</PageTitle>
<button @onclick="FocusInputField">Start</button>
<input id="keyCaptureElement" @ref="keyCaptureElementRef" type="text" @onkeydown="DetectKeyPress" />
<div id="left" style=@leftStyle>LEFT</div>
<div id="right" style=@rightStyle>RIGHT</div>
<div id="up" style=@upStyle>UP</div>
<div id="down" style=@downStyle>DOWN</div>


@code {
    private ElementReference keyCaptureElementRef;

    string leftStyle = "";
    string rightStyle = "";
    string upStyle = "";
    string downStyle = "";

    private async void FocusInputField()
    {
        await keyCaptureElementRef.FocusAsync();
    }

    private async void DetectKeyPress(KeyboardEventArgs e)
    {
        await ConsoleLog("test2");
        // if (e.Key == "w" || e.Key == "a" || e.Key == "s" || e.Key == "d")
        // {
        //     await ConsoleLog("WASD was pressed");
        // }

        switch (e.Key)
        {
            case "a":
                leftStyle = "border: solid 5px red";
                downStyle = upStyle = rightStyle = "";
                StateHasChanged();
                break;
            case "s":
                downStyle = "border: solid 5px red";
                leftStyle = upStyle = rightStyle = "";
                StateHasChanged();
                break;
            case "d":
                rightStyle = "border: solid 5px red";
                downStyle = upStyle = leftStyle = "";
                StateHasChanged();
                break;
            case "w":
                upStyle = "border: solid 5px red";
                downStyle = leftStyle = rightStyle = "";
                StateHasChanged();
                break;
            default:
                await ConsoleLog("another key was pressed");
                break;
        }
    }

    async Task ConsoleLog(string message)
    {
        await JSRuntime.InvokeAsync<object>("console.log", message);
    }
}
