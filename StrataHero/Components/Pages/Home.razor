@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject StratagemClient Client

<PageTitle>Home</PageTitle>
<button @onclick="FocusInputField">Start</button>
<input id="keyCaptureElement" @ref="keyCaptureElementRef" type="text" @onkeydown="DetectKeyPress" />
<div class="container">
    @* @for (int i = 0; i < codeList[index].Length; i++)
    {
        var character = codeList[index][i];
        <i class="me-2 @(GetCssClass(i))">@character</i>
    } *@
    @if(Stratagem is not null)
    {
        <p>@Stratagem.Name</p>
        @foreach(char seq in Stratagem.Sequence.ToCharArray()){
            <i>@seq</i>
        }
    }
</div>
<p>Score: @score</p>
<div class="progress">
  <div class="progress-bar" role="progressbar" style="width:@progress" aria-valuenow="@timeLeft" aria-valuemin="0" aria-valuemax="100">@timeLeft</div>
</div

@progress
@code {
    private ElementReference keyCaptureElementRef;

    private List<Stratagem>? StratagemList;
    private Stratagem? Stratagem = new();

    int score = 0;
    int index = 0;
    int codeCharacterIndex = 0;
    Dictionary<int, bool> correctStatus = new Dictionary<int, bool>();

    List<string[]> codeList = new List<string[]>
        { 
            new string[] { "W", "A", "D" },
            new string[] { "D", "S", "A" } 
        };

    //Timer variables
    private int timeLeft = 10; // Total countdown time in seconds
    private int totalTime = 10;
    private string progress = "100%";
    private bool isRunning = false;
    private System.Timers.Timer? timer;
    //**********************************//

    protected override void OnInitialized()
    {
        StratagemList = Client.GetStratagems();
        GetStratagem(index);
    }

    //Game starts
    private async Task FocusInputField()
    {
        await keyCaptureElementRef.FocusAsync();
        await StartTimer();
    }

    private void GetStratagem(int index)
    {
        Stratagem.Name = StratagemList[index].Name;
        Stratagem.Sequence = StratagemList[index].Sequence;
        Stratagem.Image = StratagemList[index].Image;
    }


    private async Task DetectKeyPress(KeyboardEventArgs e)
    {
        if (e.Key.ToUpper() == codeList[index][codeCharacterIndex])
        {
            correctStatus[codeCharacterIndex] = true;
            codeCharacterIndex++;
            if (codeCharacterIndex == codeList[index].Length)
            {
                index++;
                codeCharacterIndex = 0;
                correctStatus.Clear();
                score += 10;
                timeLeft += 5;
                if (index >= codeList.Count)
                {
                    index = 0;
                }
            }
        }
        else
        {
            correctStatus[codeCharacterIndex] = false;
            codeCharacterIndex = 0;
        }
        StateHasChanged();
    }

    private string GetCssClass(int index)
    {
        if (correctStatus.ContainsKey(index))
        {
            return correctStatus[index] ? "correct" : "incorrect";
        }
        return string.Empty;
    }

    //Timer*******************************

    private async Task StartTimer()
    {
        isRunning = true;
        timeLeft = totalTime;
        UpdateProgressBar();

        timer = new System.Timers.Timer(1000); // Set the timer interval to 1 second
        timer.Elapsed += OnTimerElapsed;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (timeLeft > 0)
        {
            timeLeft--;
            UpdateProgressBar();
            InvokeAsync(StateHasChanged); // Refresh UI
        }
        else
        {
            timer?.Stop();
            isRunning = false;
            InvokeAsync(StateHasChanged); // Refresh UI
        }
    }

    private void UpdateProgressBar()
    {
        double newProgress = ((double)timeLeft / totalTime * 100);
        if (newProgress > 100)
        {
            newProgress = 100;
            progress = (newProgress).ToString("F0") + "%";
        }
        progress = (newProgress).ToString("F0") + "%";
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
    //Timer end*******************************
}
